###########################################################################################################################################################################
################################## ESPERIMENTO 1: NO DICTIONARY (all shifts of transcripts/split long reads) ##############################################################
###########################################################################################################################################################################


###########################################################################################################################################################################
# 1) Generazione fingerprint e factorization per ogni finestra da 300 di ogni trascritto ##################################################################################
###########################################################################################################################################################################

IN LOCALE:
python fingerprint.py --type 1f_np --path training/ --fasta example_transcripts_genes.fa --type_factorization CFL_ICFL_COMB-30 --fact create --shift shift -n 4

SUL SERVER:
python3 fingerprint.py --type 1f_np --path training/ --fasta transcripts_genes.fa --type_factorization CFL_ICFL_COMB-30 --fact create --shift shift -n 8

###########################################################################################################################################################################
###########################################################################################################################################################################


###########################################################################################################################################################################
2) Generazione dataset ####################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE:
python training.py --step dataset --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8

SUL SERVER:
python3 training.py --step dataset --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8

###########################################################################################################################################################################
###########################################################################################################################################################################


###########################################################################################################################################################################
3) Train k-fingers RF #####################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE:
python training.py --step train --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8 --model RF

SUL SERVER:
python3 training.py --step train --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8 --model RF

###########################################################################################################################################################################
###########################################################################################################################################################################

IMPORTANTE: -> COPIARE ".pickle" (del classificatore) e ".csv" generati nella cartella "testing"

###########################################################################################################################################################################
4) Test k-fingers RF #####################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE:
python testing.py --step test_fusion --path testing/ --fasta example-reads-both.fastq --best_model RF_CFL_ICFL_COMB-30_K8.pickle --type_factorization CFL_ICFL_COMB-30 --k_value 8 -n 4

SUL SERVER:
python3 testing.py --step test_fusion --path testing/ --fasta example-reads-both.fastq --best_model RF_CFL_ICFL_COMB-30_K8.pickle --type_factorization CFL_ICFL_COMB-30 --k_value 8 -n 8

###########################################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE decommentare il main di "testing.py" per poter generare in count, il parser, e poi analizzare


###########################################################################################################################################################################
################################## ESPERIMENTO 2: DICTIONARY (split transcripts with dictionary/adaptive split long reads) ################################################
###########################################################################################################################################################################


###########################################################################################################################################################################
# 1) Generazione fingerprint e factorization per ogni finestra da 300 di ogni trascritto ##################################################################################
###########################################################################################################################################################################

IN LOCALE:
python fingerprint.py --type 1f_np --path training/ --fasta example_transcripts_genes.fa --type_factorization CFL_ICFL_COMB-30 -n 4 --dictionary yes

SUL SERVER:
python3 fingerprint.py --type 1f_np --path training/ --fasta transcripts_genes.fa --type_factorization CFL_ICFL_COMB-30 -n 8 --dictionary yes

###########################################################################################################################################################################
###########################################################################################################################################################################


###########################################################################################################################################################################
2) Generazione dataset ####################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE:
python training.py --step dataset --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8

SUL SERVER:
python3 training.py --step dataset --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8

###########################################################################################################################################################################
###########################################################################################################################################################################


###########################################################################################################################################################################
3) Train k-fingers RF #####################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE:
python training.py --step train --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8 --model RF -n 4

SUL SERVER:
python3 training.py --step train --path training/ --type_factorization CFL_ICFL_COMB-30 --k_value 8 --model RF -n 8

###########################################################################################################################################################################
###########################################################################################################################################################################


IMPORTANTE: -> COPIARE ".pickle" (del classificatore) e ".csv" generati nella cartella "testing"

###########################################################################################################################################################################
4) Test k-fingers RF #####################################################################################################################################################
###########################################################################################################################################################################

IN LOCALE:
python testing.py --step test_fusion --path testing/ --fasta example-reads-both.fastq --best_model RF_CFL_ICFL_COMB-30_K8.pickle --type_factorization CFL_ICFL_COMB-30 --k_value 8 -n 4 --dictionary yes

SUL SERVER:
python3 testing.py --step test_fusion --path testing/ --fasta reads-both.fastq --best_model RF_CFL_ICFL_COMB-30_K8.pickle --type_factorization CFL_ICFL_COMB-30 --k_value 8 -n 8 --dictionary yes

###########################################################################################################################################################################
###########################################################################################################################################################################
